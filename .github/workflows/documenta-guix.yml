name: Guix + Guile Documentá → Guix API PDF (cached)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      LANG: C.UTF-8
      LC_ALL: C.UTF-8
      # Document just the Guix module tree by default; "guix gnu" is larger.
      MODULE_SOURCES: "guix"

    steps:
      - uses: actions/checkout@v4

      - name: Install host deps (Texinfo/PDF + zstd)
        run: |
          sudo apt-get update
          sudo apt-get install -y curl xz-utils zstd git \
            texinfo \
            texlive-latex-base texlive-latex-recommended \
            texlive-fonts-recommended texlive-latex-extra

      # Cache the Guix binary tarball to avoid re-downloading it.
      - name: Cache Guix binary tarball
        id: cache-guix-bin
        uses: actions/cache@v4
        with:
          path: .cache/guix/guix-binary-1.4.0.x86_64-linux.tar.xz
          key: guix-binary-1.4.0

      - name: Download Guix binary (if not cached)
        if: steps.cache-guix-bin.outputs.cache-hit != 'true'
        run: |
          mkdir -p .cache/guix
          curl -L -o .cache/guix/guix-binary-1.4.0.x86_64-linux.tar.xz \
            https://ftp.gnu.org/gnu/guix/guix-binary-1.4.0.x86_64-linux.tar.xz

      - name: Install Guix and start daemon
        run: |
          set -eux
          sudo tar --extract \
            --file=.cache/guix/guix-binary-1.4.0.x86_64-linux.tar.xz \
            --directory=/ --no-same-owner --warning=no-unknown-keyword
          sudo groupadd --system guixbuild || true
          for i in $(seq -w 1 10); do
            sudo useradd -g guixbuild -G guixbuild -d /var/empty \
              -s "$(command -v nologin || echo /usr/sbin/nologin)" \
              -c "Guix build user $i" guixbuilder$i || true
          done
          sudo -E /var/guix/profiles/per-user/root/current-guix/bin/guix-daemon \
            --build-users-group=guixbuild \
            --disable-chroot \
            --substitute-urls='https://ci.guix.gnu.org https://bordeaux.guix.gnu.org' &
          sleep 5
          guix --version

      - name: Configure Guix channels
        run: |
          mkdir -p "$HOME/.config/guix"
          cat > "$HOME/.config/guix/channels.scm" <<'EOF'
          (list
            (channel
              (name 'guix)
              (url "https://git.savannah.gnu.org/git/guix.git"))
            ;; If guile-documenta is not in your Guix, add the author’s channel here:
            ;; (channel
            ;;   (name 'documenta)
            ;;   (url "https://codeberg.org/USER/CHANNEL.git"))
          )
          EOF
          cat "$HOME/.config/guix/channels.scm"

      - name: guix pull (update to latest)
        run: |
          set -eux
          guix pull
          . "$HOME/.config/guix/current/etc/profile"
          guix describe

      # Compute a cache key tied to the exact channel revision we just pulled.
      - name: Compute cache key from channels
        id: guix-key
        run: |
          set -eux
          . "$HOME/.config/guix/current/etc/profile"
          guix describe -f channels > channels.scm
          sha=$(sha256sum channels.scm | cut -d' ' -f1)
          echo "key=$sha" >> "$GITHUB_OUTPUT"
          mkdir -p cache

      # Try to restore a tar.zst of the Guix store closure for Documentá+current-guix.
      - name: Restore Guix store cache
        id: store-cache
        uses: actions/cache@v4
        with:
          path: cache/guix-store-${{ steps.guix-key.outputs.key }}.tar.zst
          key: guix-store-${{ steps.guix-key.outputs.key }}

      - name: Extract cached store (if present)
        if: steps.store-cache.outputs.cache-hit == 'true'
        run: |
          sudo tar -I zstd -xf "cache/guix-store-${{ steps.guix-key.outputs.key }}.tar.zst" -C /

      - name: Install Guile Documentá via Guix
        run: |
          set -eux
          . "$HOME/.config/guix/current/etc/profile"
          guix install guile-documenta
          . "$HOME/.guix-profile/etc/profile"
          command -v documenta
          documenta --version || true

      # If we missed the cache, pack the closure for next runs.
      - name: Save store tarball for cache (closure)
        if: steps.store-cache.outputs.cache-hit != 'true'
        run: |
          set -eux
          . "$HOME/.config/guix/current/etc/profile"
          . "$HOME/.guix-profile/etc/profile"
          # Tar the transitive closures (requisites) of both the current-guix and your profile.
          paths=$(guix gc --requisites "$HOME/.config/guix/current" "$HOME/.guix-profile")
          sudo tar -I "zstd -T0 -19" -cf "cache/guix-store-${{ steps.guix-key.outputs.key }}.tar.zst" $paths
          ls -lh "cache/guix-store-${{ steps.guix-key.outputs.key }}.tar.zst" || true

      - name: Clone Guix sources (to document)
        run: |
          git clone --depth=1 https://git.savannah.gnu.org/git/guix.git

      - name: Generate Texinfo API with Documentá
        working-directory: guix
        run: |
          mkdir -p doc
          # If documenting both 'guix' and 'gnu' (huge), set env MODULE_SOURCES: "guix gnu"
          documenta api $MODULE_SOURCES --destination doc/api
          # Minimal wrapper manual including the generated API
          cat > doc/main.texi <<'EOF'
          \input texinfo
          @setfilename guix-api
          @settitle Guix API (generated by Guile Documentá)
          @documentlanguage en
          @documentencoding UTF-8

          @node Top
          @top Guix API

          @menu
          * API::
          @end menu

          @node API
          @chapter API
          @include api/index.texi

          @bye
          EOF

      - name: Build PDF from Texinfo
        working-directory: guix/doc
        run: |
          makeinfo --no-split --pdf -o guix-api-documenta.pdf main.texi
          ls -lh guix-api-documenta.pdf

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: guix-api-documenta
          path: guix/doc/guix-api-documenta.pdf
